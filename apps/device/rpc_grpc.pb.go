// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: mcenter/apps/device/pb/rpc.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_DescribeDevice_FullMethodName         = "/mcenter.device.RPC/DescribeDevice"
	RPC_QueryDevice_FullMethodName            = "/mcenter.device.RPC/QueryDevice"
	RPC_AllocationDevice_FullMethodName       = "/mcenter.device.RPC/AllocationDevice"
	RPC_ReleaseDevices_FullMethodName         = "/mcenter.device.RPC/ReleaseDevices"
	RPC_ValidateDevice_FullMethodName         = "/mcenter.device.RPC/ValidateDevice"
	RPC_QueryDeviceByNamespace_FullMethodName = "/mcenter.device.RPC/QueryDeviceByNamespace"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	DescribeDevice(ctx context.Context, in *DescribeDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	QueryDevice(ctx context.Context, in *QueryDeviceRequest, opts ...grpc.CallOption) (*DeviceSet, error)
	AllocationDevice(ctx context.Context, in *AllocationRequest, opts ...grpc.CallOption) (*DeviceSet, error)
	ReleaseDevices(ctx context.Context, in *ReleaseDevicesRequest, opts ...grpc.CallOption) (*DeviceSet, error)
	ValidateDevice(ctx context.Context, in *ValidateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	QueryDeviceByNamespace(ctx context.Context, in *QueryDeviceByNamespaceRequest, opts ...grpc.CallOption) (*DeviceByNamespaceSet, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) DescribeDevice(ctx context.Context, in *DescribeDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, RPC_DescribeDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryDevice(ctx context.Context, in *QueryDeviceRequest, opts ...grpc.CallOption) (*DeviceSet, error) {
	out := new(DeviceSet)
	err := c.cc.Invoke(ctx, RPC_QueryDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) AllocationDevice(ctx context.Context, in *AllocationRequest, opts ...grpc.CallOption) (*DeviceSet, error) {
	out := new(DeviceSet)
	err := c.cc.Invoke(ctx, RPC_AllocationDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ReleaseDevices(ctx context.Context, in *ReleaseDevicesRequest, opts ...grpc.CallOption) (*DeviceSet, error) {
	out := new(DeviceSet)
	err := c.cc.Invoke(ctx, RPC_ReleaseDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ValidateDevice(ctx context.Context, in *ValidateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, RPC_ValidateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryDeviceByNamespace(ctx context.Context, in *QueryDeviceByNamespaceRequest, opts ...grpc.CallOption) (*DeviceByNamespaceSet, error) {
	out := new(DeviceByNamespaceSet)
	err := c.cc.Invoke(ctx, RPC_QueryDeviceByNamespace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	DescribeDevice(context.Context, *DescribeDeviceRequest) (*Device, error)
	QueryDevice(context.Context, *QueryDeviceRequest) (*DeviceSet, error)
	AllocationDevice(context.Context, *AllocationRequest) (*DeviceSet, error)
	ReleaseDevices(context.Context, *ReleaseDevicesRequest) (*DeviceSet, error)
	ValidateDevice(context.Context, *ValidateDeviceRequest) (*Device, error)
	QueryDeviceByNamespace(context.Context, *QueryDeviceByNamespaceRequest) (*DeviceByNamespaceSet, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) DescribeDevice(context.Context, *DescribeDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDevice not implemented")
}
func (UnimplementedRPCServer) QueryDevice(context.Context, *QueryDeviceRequest) (*DeviceSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDevice not implemented")
}
func (UnimplementedRPCServer) AllocationDevice(context.Context, *AllocationRequest) (*DeviceSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationDevice not implemented")
}
func (UnimplementedRPCServer) ReleaseDevices(context.Context, *ReleaseDevicesRequest) (*DeviceSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseDevices not implemented")
}
func (UnimplementedRPCServer) ValidateDevice(context.Context, *ValidateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDevice not implemented")
}
func (UnimplementedRPCServer) QueryDeviceByNamespace(context.Context, *QueryDeviceByNamespaceRequest) (*DeviceByNamespaceSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeviceByNamespace not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_DescribeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeDevice(ctx, req.(*DescribeDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryDevice(ctx, req.(*QueryDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_AllocationDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).AllocationDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_AllocationDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).AllocationDevice(ctx, req.(*AllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_ReleaseDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).ReleaseDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_ReleaseDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).ReleaseDevices(ctx, req.(*ReleaseDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_ValidateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).ValidateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_ValidateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).ValidateDevice(ctx, req.(*ValidateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryDeviceByNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeviceByNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryDeviceByNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryDeviceByNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryDeviceByNamespace(ctx, req.(*QueryDeviceByNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcenter.device.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeDevice",
			Handler:    _RPC_DescribeDevice_Handler,
		},
		{
			MethodName: "QueryDevice",
			Handler:    _RPC_QueryDevice_Handler,
		},
		{
			MethodName: "AllocationDevice",
			Handler:    _RPC_AllocationDevice_Handler,
		},
		{
			MethodName: "ReleaseDevices",
			Handler:    _RPC_ReleaseDevices_Handler,
		},
		{
			MethodName: "ValidateDevice",
			Handler:    _RPC_ValidateDevice_Handler,
		},
		{
			MethodName: "QueryDeviceByNamespace",
			Handler:    _RPC_QueryDeviceByNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcenter/apps/device/pb/rpc.proto",
}
